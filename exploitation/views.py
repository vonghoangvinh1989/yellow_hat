from django.shortcuts import render
from django.http import Http404, JsonResponse, HttpResponse
from .models import ExploitationTool
from django.contrib.auth.decorators import login_required
from yellow_hat.constants import NMAP_SMB_BRUTE
import time
import subprocess
from django.conf import settings


# Create your views here.
def index(request):
    return render(request, "exploitation/index.html")


from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse, HttpResponse, Http404
from django.contrib.auth.decorators import login_required
import subprocess
import select
from .models import ExploitationTool


@login_required
def exploitation_tools(request, exploitation_tool_slug):
    exploitation_tool = get_object_or_404(ExploitationTool, slug=exploitation_tool_slug)
    if request.method == "GET":
        return render(
            request,
            "exploitation/nmap-smb-brute.html",
            {
                "exploitation_tool": exploitation_tool,
            },
        )
    elif request.method == "POST":
        target_domain = request.POST.get("domain").strip().lower()
        if not target_domain:
            return JsonResponse({"error_message": "IP address is required"}, status=400)

        # Here you might start a background task to run the scan and save the results
        # For simplicity, we'll assume that the scan is started immediately and streamed

        # Save the target domain or other data as needed
        return JsonResponse({"message": "Scan started"})


@login_required
def exploitation_tools_stream(request, exploitation_tool_slug):
    exploitation_tool = get_object_or_404(ExploitationTool, slug=exploitation_tool_slug)
    target_domain = request.GET.get("domain").strip().lower()

    if not target_domain:
        return HttpResponse("IP address is required", status=400)

    # Define the Nmap command for SMB brute force with verbose output
    nmap_command = [
        "nmap",
        "-p",
        "445",
        "--script",
        "smb-brute",
        target_domain,
        "-T4",
        "--min-parallelism",
        "100",
        "--max-retries",
        "1",
        "--max-rate",
        "500",
        "--min-rate",
        "100",
        "-vvvv",
    ]

    def stream_output():
        with subprocess.Popen(
            nmap_command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1,
            universal_newlines=True,
        ) as process:
            try:
                while True:
                    output = process.stdout.readline()
                    if output == "" and process.poll() is not None:
                        break
                    if output:
                        yield f"data: {output}\n\n"
                    time.sleep(0.1)  # to prevent tight loop and high CPU usage
            except Exception as e:
                yield f"data: Error occurred while streaming Nmap output: {str(e)}\n\n"

    response = HttpResponse(stream_output(), content_type="text/event-stream")
    response["Cache-Control"] = "no-cache"
    return response
