from django.shortcuts import render
from django.http import Http404, JsonResponse
from .models import PostExploitationTool
from django.contrib.auth.decorators import login_required
from yellow_hat.constants import LINPEAS
from django.conf import settings
import paramiko
import os
import re
import time

# Configure paths
LINPEAS_TAR_PATH = os.path.join(settings.RUNNING_SCRIPTS_DIRECTORY, "linpeas.tar")
LINPEAS_SCRIPT_PATH = "/tmp/linpeas.sh"


# Create your views here.
def index(request):
    return render(request, "post_exploitation/index.html")


# Define the function to remove ANSI escape codes (clean output)
def remove_ansi_escape_codes(output: str) -> str:
    ansi_escape = re.compile(r"(?:\x1B[@-Z\\^_]|[\x00-\x1F\x7F])+")
    return ansi_escape.sub("", output)


@login_required
def post_exploitation_tools(request, post_exploitation_tool_slug):
    post_exploitation_tool = PostExploitationTool.objects.get(
        slug=post_exploitation_tool_slug
    )
    post_exploitation_tool_name = post_exploitation_tool.name.strip().lower()

    try:
        if request.method == "GET":
            if post_exploitation_tool_name in LINPEAS:
                return render(
                    request,
                    "post_exploitation/linpeas.html",
                    {
                        "post_exploitation_tool": post_exploitation_tool,
                    },
                )
        elif request.method == "POST":
            target_ip = request.POST.get("target_ip")
            victim_username = request.POST.get("victim_username")
            victim_password = request.POST.get("victim_password")

            try:
                # Step 1: Create SSH client
                ssh_client = paramiko.SSHClient()
                ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

                # Step 2: Connect to the target machine
                ssh_client.connect(
                    target_ip, username=victim_username, password=victim_password
                )

                # Step 3: Upload linpeas.tar file
                sftp_client = ssh_client.open_sftp()
                sftp_client.put(LINPEAS_TAR_PATH, "/tmp/linpeas.tar")
                sftp_client.close()

                # Step 4: Extract the tar file on the target machine
                extract_command = "tar -xvf /tmp/linpeas.tar -C /tmp"
                stdin, stdout, stderr = ssh_client.exec_command(extract_command)
                extraction_output = stdout.read().decode()

                # Step 5: Run the linpeas.sh script with sudo and redirect output to a file
                run_command = "sudo chmod +x /tmp/linpeas.sh && /tmp/linpeas.sh > /tmp/linpeas_output.txt 2>&1"
                stdin, stdout, stderr = ssh_client.exec_command(run_command)

                # Handle the sudo password prompt
                stdin.write(victim_password + "\n")
                stdin.flush()

                # Wait for the script to finish
                time.sleep(5)  # Adjust timing as necessary

                # Wait for the script to finish (optional: use a sleep time or check if the file exists)
                time.sleep(5)  # Adjust timing as necessary

                # Step 6: Fetch the linpeas output file
                sftp_client = ssh_client.open_sftp()
                linpeas_output_file = "/tmp/linpeas_output.txt"
                linpeas_output = ""

                try:
                    with sftp_client.open(linpeas_output_file, "r") as f:
                        linpeas_output = f.read().decode(
                            "utf-8"
                        )  # Read the content of the output file
                except Exception as e:
                    return JsonResponse(
                        {
                            "status": "error",
                            "message": "Error reading linpeas output file.",
                        }
                    )

                sftp_client.close()

                # Optionally, delete the tar and script files from the target machine for cleanup
                cleanup_command = (
                    "rm -rf /tmp/linpeas.tar /tmp/linpeas.sh /tmp/linpeas_output.txt"
                )
                ssh_client.exec_command(cleanup_command)

                # Step 7: Clean the linpeas output from ANSI escape codes
                clean_output = remove_ansi_escape_codes(linpeas_output)

                # Step 8: Return the result
                ssh_client.close()

                return JsonResponse({"status": "success", "output": clean_output})
            except Exception as e:
                return JsonResponse({"status": "error", "message": str(e)})

        else:
            return JsonResponse(
                {"status": "error", "message": "Invalid request method."}
            )
    except PostExploitationTool.DoesNotExist:
        raise Http404("Post Exploitation Tool does not exist")
