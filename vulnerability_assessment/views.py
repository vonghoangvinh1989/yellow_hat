from django.shortcuts import render
from django.http import Http404, JsonResponse
from .models import VulnerabilityAssessmentTool
from .utils import python_nmap_utils
from django.contrib.auth.decorators import login_required
from yellow_hat.constants import NMAP


# Create your views here.
def index(request):
    return render(request, "vulnerability_assessment/index.html")


@login_required
def vulnerability_assessment_tools(request, vulnerability_assessment_tool_slug):
    vulnerability_tool = VulnerabilityAssessmentTool.objects.get(
        slug=vulnerability_assessment_tool_slug
    )
    vulnerability_tool_name = vulnerability_tool.name.strip().lower()

    try:
        if request.method == "GET":
            if vulnerability_tool_name in NMAP:
                return render(
                    request,
                    "vulnerability_assessment/nmap.html",
                    {
                        "vulnerability_tool": vulnerability_tool,
                    },
                )
        elif request.method == "POST":
            target_domain = request.POST.get("domain").strip().lower()
            port_range = request.POST.get("port_range").strip().lower()
            script_type = request.POST.get("script_type").strip().lower()
            print(f"Target domain is {target_domain}")
            print(f"Port range is {port_range}")
            print(f"Script type is {script_type}")

            # set default values for error and response data
            error_message = None
            response_data = None

            # store the result of nmap scanning
            scanning_nmap_result = None

            if not target_domain:
                error_message = str("Please enter a valid domain name.")
                response_data = {
                    "error_message": error_message,
                }
                return JsonResponse(response_data)

            if not python_nmap_utils.validate_port_range(port_range):
                error_message = str("Please input a valid port range.")
                response_data = {
                    "error_message": error_message,
                }
                return JsonResponse(response_data)

            if vulnerability_tool_name in NMAP:
                try:
                    scanning_nmap_result = (
                        python_nmap_utils.scan_vulnerabilities_concurrent(
                            target_domain,
                            port_range,
                            script_type,
                            min_parallelism=10,
                            max_parallelism=100,
                        )
                    )
                except Exception as err:
                    error_message = str(err)

                response_data = {
                    "scanning_result": scanning_nmap_result,
                    "error_message": error_message,
                }
            else:
                error_message = str("Not using NMAP Tool")
                response_data = {
                    "error_message": error_message,
                }

            # return json response
            return JsonResponse(response_data)
    except VulnerabilityAssessmentTool.DoesNotExist:
        raise Http404("Vulnerability Assessment Tool does not exist")
